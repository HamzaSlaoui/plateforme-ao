import time
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from selenium.webdriver.chrome.service import Service


def select_domain(driver, domaines: list[str]):
    if not domaines:
        return

    wait = WebDriverWait(driver, 15)

    # Masquer l'overlay si pr√©sent
    try:
        driver.execute_script("""
            const el = document.querySelector('#contentFicheConseil');
            if (el) el.style.display = 'none';
        """)
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur masquage overlay : {e}")

    # Ouvrir la popup
    try:
        btn = wait.until(EC.element_to_be_clickable(
            (By.ID, "ctl0_CONTENU_PAGE_AdvancedSearch_domaineActivite_linkDisplay")
        ))
        driver.execute_script("arguments[0].scrollIntoView({block:'center'});", btn)
        btn.click()
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur clic domaine : {e}")
        return

    # Switch vers popup
    main_handle = driver.current_window_handle
    WebDriverWait(driver, 10).until(lambda d: len(d.window_handles) > 1)
    popup_handle = [h for h in driver.window_handles if h != main_handle][0]
    driver.switch_to.window(popup_handle)

    # D√©plier toutes les cat√©gories
    driver.execute_script("""
        document.querySelectorAll('ul.indent-ss-cat, ul.indent-cat').forEach(u => u.style.display = 'block');
        document.querySelectorAll('img[id^="sous-cats_img_plus_moins_"]').forEach(i => {
            if (i.src.includes('picto-plus.gif')) {
                i.src = i.src.replace('picto-plus.gif', 'picto-moins.gif');
            }
        });
    """)
    time.sleep(0.3)

    # S√©lectionner chaque domaine
    labels = driver.find_elements(By.TAG_NAME, "label")
    for domaine in domaines:
        print(f"üîç S√©lection du domaine d'activit√©: '{domaine}'")
        target_label = None
        for lbl in labels:
            try:
                if domaine in lbl.text:
                    target_label = lbl
                    break
            except:
                continue

        if not target_label:
            print(f"‚ö†Ô∏è Domaine '{domaine}' introuvable. Ignor√©.")
            continue

        # Cocher la case
        try:
            checkbox = target_label.find_element(By.XPATH, "./preceding::input[@type='checkbox'][1]")
            if not checkbox.is_selected():
                checkbox.click()
        except Exception as e:
            print(f"‚ö†Ô∏è Impossible de cocher la checkbox pour '{domaine}': {e}")

    # Valider la popup
    try:
        WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.ID, "ctl0_CONTENU_PAGE_validateButton"))
        ).click()
    except Exception as e:
        print(f"‚ö†Ô∏è √âchec clic sur Valider : {e}")

    # Retour √† la fen√™tre principale
    WebDriverWait(driver, 5).until(lambda d: len(d.window_handles) == 1)
    driver.switch_to.window(main_handle)
    time.sleep(0.5)


def fill_acheteur_public(driver, acheteur: str):
    if not acheteur:
        return
    wait = WebDriverWait(driver, 10)
    print(f"üîç Remplissage acheteur public: '{acheteur}'")
    inp = wait.until(EC.visibility_of_element_located(
        (By.ID, "ctl0_CONTENU_PAGE_AdvancedSearch_orgName")))
    inp.clear()
    inp.send_keys(acheteur)
    time.sleep(0.5)
    inp.send_keys(Keys.TAB)
    time.sleep(0.2)


def fill_reference(driver, reference: str):
    if not reference:
        return
    wait = WebDriverWait(driver, 10)
    print(f"üîç Remplissage r√©f√©rence: '{reference}'")
    try:
        ref_input = wait.until(EC.visibility_of_element_located(
            (By.ID, "ctl0_CONTENU_PAGE_AdvancedSearch_reference")
        ))
    except Exception as e:
        print(f"‚ö†Ô∏è champ R√©f√©rence introuvable: {e}")
        return

    try:
        driver.execute_script("arguments[0].scrollIntoView({block:'center'});", ref_input)
    except:
        pass

    try:
        ref_input.clear()
        ref_input.send_keys(reference)
        driver.execute_script("arguments[0].dispatchEvent(new Event('input')); arguments[0].blur();", ref_input)
        time.sleep(0.2)
    except Exception:
        try:
            driver.execute_script(
                "arguments[0].value = arguments[1]; arguments[0].dispatchEvent(new Event('input'));",
                ref_input, reference
            )
            driver.execute_script("arguments[0].blur();", ref_input)
            time.sleep(0.2)
        except Exception as e2:
            print(f"‚ö†Ô∏è impossible de forcer la r√©f√©rence par JS: {e2}")


def launch_search(driver):
    print("üîé Lancement de la recherche")
    WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.ID, "ctl0_CONTENU_PAGE_AdvancedSearch_lancerRecherche"))
    ).click()


def wait_for_results_page(driver, timeout=30):
    """Attend que la page de r√©sultats se charge compl√®tement avec strat√©gies multiples"""
    wait = WebDriverWait(driver, timeout)
    try:
        # Strat√©gie 1: Attendre les √©l√©ments normaux avec le bon ID
        wait.until(EC.any_of(
            EC.presence_of_element_located((By.CSS_SELECTOR, "table.table-results tbody tr:not(.dataTables_empty) span.ref")),
            EC.presence_of_element_located((By.CSS_SELECTOR, ".dataTables_empty")),
            EC.presence_of_element_located((By.ID, "ctl0_CONTENU_PAGE_resultSearch_nombreElement"))
        ))
        time.sleep(1)
        return True
    except TimeoutException:
        print("‚ö†Ô∏è Timeout strat√©gie 1, tentative strat√©gie alternative...")
        
    try:
        # Strat√©gie 2: Attendre tout √©l√©ment indiquant des r√©sultats
        wait.until(EC.any_of(
            EC.presence_of_element_located((By.CSS_SELECTOR, "table.table-results")),
            EC.presence_of_element_located((By.CSS_SELECTOR, "[class*='result']")),
            EC.presence_of_element_located((By.CSS_SELECTOR, "[id*='result']"))
        ))
        time.sleep(2)
        return True
    except TimeoutException:
        print("‚ö†Ô∏è Timeout strat√©gie 2")
        
    try:
        # Strat√©gie 3: V√©rifier si la page a chang√© (URL contient 'result' ou similaire)
        current_url = driver.current_url.lower()
        if 'result' in current_url or 'search' in current_url:
            time.sleep(2)
            return True
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur v√©rification URL: {e}")
    
    print("‚ö†Ô∏è Timeout lors de l'attente de la page de r√©sultats")
    return False


def get_total_results(driver):
    """R√©cup√®re le nombre total de r√©sultats avec plusieurs strat√©gies de fallback"""
    try:
        # Strat√©gie 1: Utiliser l'ID correct bas√© sur votre HTML
        total_element = driver.find_element(By.ID, "ctl0_CONTENU_PAGE_resultSearch_nombreElement")
        total = int(total_element.text.strip())
        print(f"üìä Total des r√©sultats: {total}")
        return total
    except Exception as e:
        print(f"‚ö†Ô∏è Strat√©gie 1 √©chou√©e: {e}")
        
    try:
        # Strat√©gie 2: Chercher par span avec le bon ID
        total_span = driver.find_element(By.CSS_SELECTOR, "span[id='ctl0_CONTENU_PAGE_resultSearch_nombreElement']")
        total = int(total_span.text.strip())
        print(f"üìä Total des r√©sultats (strat√©gie 2): {total}")
        return total
    except Exception as e:
        print(f"‚ö†Ô∏è Strat√©gie 2 √©chou√©e: {e}")
        
    try:
        # Strat√©gie 3: Chercher dans les √©l√©ments contenant du texte num√©rique
        elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'r√©sultat') or contains(text(), 'result')]")
        for elem in elements:
            text = elem.text.strip()
            # Chercher un pattern comme "X r√©sultats" ou "Total: X"
            import re
            numbers = re.findall(r'\d+', text)
            if numbers:
                total = int(numbers[0])
                print(f"üìä Total des r√©sultats (strat√©gie 3): {total}")
                return total
    except Exception as e:
        print(f"‚ö†Ô∏è Strat√©gie 3 √©chou√©e: {e}")
        
    try:
        # Strat√©gie 4: Compter les lignes de r√©sultats visibles et extrapoler
        visible_rows = driver.find_elements(
            By.CSS_SELECTOR,
            "table.table-results tbody tr:not(.dataTables_empty)"
        )
        if visible_rows:
            # Si on a des r√©sultats visibles, on assume qu'il y en a au moins autant
            total = len(visible_rows)
            print(f"üìä Total estim√© bas√© sur les lignes visibles: {total}")
            return total
    except Exception as e:
        print(f"‚ö†Ô∏è Strat√©gie 4 √©chou√©e: {e}")
    
    print("‚ö†Ô∏è Impossible de d√©terminer le nombre total de r√©sultats")
    return 0


def set_max_results_per_page(driver):
    """Met le s√©lecteur sur 500 r√©sultats par page pour r√©cup√©rer le maximum"""
    try:
        # ID corrig√© : un seul z√©ro apr√®s ctl
        select_element = driver.find_element(By.ID, "ctl0_CONTENU_PAGE_resultSearch_listePageSizeTop")
        select = Select(select_element)
        select.select_by_value("500")
        print("üìÑ Configuration: 500 r√©sultats par page")
        
        # Attendre le rechargement de la page
        time.sleep(3)
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur configuration 500 r√©sultats par page : {e}")
        return False


def fetch_marches_from_current_page(driver):
    """R√©cup√®re les march√©s de la page actuellement affich√©e"""
    marches = []
    
    try:
        rows = driver.find_elements(
            By.CSS_SELECTOR,
            "table.table-results tbody tr:not(.dataTables_empty)"
        )
        
        print(f"üìÑ {len(rows)} march√©s trouv√©s sur cette page")
        
        for tr in rows:
            try:
                reference = tr.find_element(By.CSS_SELECTOR, "span.ref").text.strip()
                objet = tr.find_element(
                    By.CSS_SELECTOR,
                    "div[id$='_panelBlocObjet']"
                ).text.replace("Objet : ", "").strip()
                acheteur = tr.find_element(
                    By.CSS_SELECTOR,
                    "div[id$='_panelBlocDenomination']"
                ).text.replace("Acheteur public : ", "").strip()
                raw_lieu = tr.find_element(
                    By.CSS_SELECTOR,
                    "div[id$='_panelBlocLieuxExec']"
                ).text
                lieu_execution = raw_lieu.splitlines()[0].strip()
                raw_dt = tr.find_element(
                    By.CSS_SELECTOR,
                    "td[headers='cons_dateEnd'] .cloture-line"
                ).text
                date_str, time_str = raw_dt.split()
                date_limite_remise = datetime.strptime(
                    f"{date_str} {time_str}", "%d/%m/%Y %H:%M"
                )

                try:
                    lien_elem = tr.find_element(
                        By.CSS_SELECTOR,
                        "div[id$='_panelAction'] a[target]"
                    )
                    lien_consultation = lien_elem.get_attribute("href")
                except Exception:
                    lien_consultation = ""

                marches.append({
                    "reference": reference,
                    "objet": objet,
                    "acheteur_public": acheteur,
                    "lieu_execution": lieu_execution,
                    "date_limite_remise": date_limite_remise,
                    "lien_consultation": lien_consultation,
                })

            except Exception as e:
                print(f"‚ö†Ô∏è √âchec parsing d'une ligne de r√©sultat : {e}")
                continue
    
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors de la r√©cup√©ration des march√©s de la page : {e}")
    
    return marches


def has_next_page(driver):
    """V√©rifie s'il y a une page suivante disponible"""
    try:
        # Chercher les liens de pagination
        pagination_links = driver.find_elements(By.CSS_SELECTOR, "a[href*='Page']")
        
        for link in pagination_links:
            link_text = link.text.strip().lower()
            if 'suivant' in link_text or 'next' in link_text or '>' in link_text:
                # V√©rifier si le lien est cliquable (pas d√©sactiv√©)
                if link.is_enabled() and 'disabled' not in link.get_attribute('class'):
                    return True
        
        # Alternative: chercher les num√©ros de page
        current_page_found = False
        for link in pagination_links:
            if 'selected' in link.get_attribute('class') or 'current' in link.get_attribute('class'):
                current_page_found = True
                continue
            if current_page_found and link.text.strip().isdigit():
                return True
        
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur v√©rification page suivante : {e}")
        return False


def go_to_next_page(driver):
    """Navigue vers la page suivante"""
    try:
        # Chercher le bouton "Suivant" ou ">"
        next_buttons = driver.find_elements(By.CSS_SELECTOR, 
            "a[title*='Suivant'], a[title*='suivant'], a[title*='Next'], a[title*='next']")
        
        for button in next_buttons:
            if button.is_enabled() and button.is_displayed() and 'disabled' not in button.get_attribute('class'):
                driver.execute_script("arguments[0].scrollIntoView({block:'center'});", button)
                button.click()
                time.sleep(3)  # Attendre le chargement
                return True
        
        # Alternative: chercher les liens de pagination num√©rot√©s
        page_links = driver.find_elements(By.CSS_SELECTOR, "a[href*='Page']")
        current_page_found = False
        
        for link in page_links:
            if 'selected' in link.get_attribute('class') or 'current' in link.get_attribute('class'):
                current_page_found = True
                continue
            
            if current_page_found and link.text.strip().isdigit():
                driver.execute_script("arguments[0].scrollIntoView({block:'center'});", link)
                link.click()
                time.sleep(3)
                return True
        
        print("‚ö†Ô∏è Bouton 'Suivant' non trouv√©")
        return False
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur navigation page suivante : {e}")
        return False


def debug_page_elements(driver):
    """Fonction de debug pour identifier les √©l√©ments disponibles sur la page"""
    print("\nüîç === DEBUG: √âL√âMENTS DE LA PAGE ===")
    
    # 1. V√©rifier l'URL actuelle
    print(f"URL actuelle: {driver.current_url}")
    
    # 2. Chercher tous les √©l√©ments avec 'result' ou 'nombre' dans l'ID
    try:
        elements_by_id = driver.find_elements(By.XPATH, "//*[contains(@id, 'result') or contains(@id, 'nombre') or contains(@id, 'total')]")
        print(f"√âl√©ments avec IDs contenant 'result/nombre/total': {len(elements_by_id)}")
        for elem in elements_by_id[:5]:  # Limiter √† 5 √©l√©ments
            try:
                print(f"  - ID: {elem.get_attribute('id')}, Text: {elem.text[:50]}...")
            except:
                print(f"  - ID: {elem.get_attribute('id')}, Text: [illisible]")
    except Exception as e:
        print(f"Erreur recherche par ID: {e}")
    
    # 3. Chercher la table de r√©sultats
    try:
        tables = driver.find_elements(By.CSS_SELECTOR, "table")
        print(f"Tables trouv√©es: {len(tables)}")
        for i, table in enumerate(tables[:3]):
            try:
                class_name = table.get_attribute('class')
                print(f"  - Table {i}: class='{class_name}'")
            except:
                print(f"  - Table {i}: [attributs illisibles]")
    except Exception as e:
        print(f"Erreur recherche tables: {e}")
    
    # 4. Chercher les √©l√©ments de pagination
    try:
        pagination_elements = driver.find_elements(By.XPATH, "//*[contains(@class, 'page') or contains(@id, 'page') or contains(text(), 'page')]")
        print(f"√âl√©ments de pagination: {len(pagination_elements)}")
    except Exception as e:
        print(f"Erreur recherche pagination: {e}")
    
    print("üîç === FIN DEBUG ===\n")


def fetch_all_marches(driver, timeout=60):
    """
    Version am√©lior√©e avec debug et gestion d'erreurs renforc√©e
    """
    print("üöÄ D√©but de fetch_all_marches")
    
    if not wait_for_results_page(driver, timeout):
        print("‚ùå √âchec de l'attente de la page de r√©sultats")
        debug_page_elements(driver)  # Debug en cas d'√©chec
        return []

    # Debug pour comprendre la structure de la page
    debug_page_elements(driver)

    # V√©rifier s'il y a des r√©sultats
    try:
        empty_elements = driver.find_elements(By.CSS_SELECTOR, ".dataTables_empty")
        if empty_elements and any(elem.is_displayed() for elem in empty_elements):
            print("‚ÑπÔ∏è Aucun march√© trouv√© (√©l√©ment dataTables_empty visible)")
            return []
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur v√©rification √©l√©ments vides: {e}")

    # R√©cup√©rer le nombre total de r√©sultats
    total_results = get_total_results(driver)
    if total_results == 0:
        print("‚ÑπÔ∏è Aucun r√©sultat trouv√© selon get_total_results")
        # Mais on continue quand m√™me pour essayer de r√©cup√©rer ce qu'on peut
        print("üîÑ Tentative de r√©cup√©ration malgr√© tout...")

    # Mettre le s√©lecteur sur 500 r√©sultats par page
    if not set_max_results_per_page(driver):
        print("‚ö†Ô∏è Impossible de configurer 500 r√©sultats par page, utilisation des param√®tres par d√©faut")

    # Attendre que la page se recharge
    if not wait_for_results_page(driver, timeout):
        print("‚ö†Ô∏è Erreur lors du rechargement avec 500 r√©sultats")
        # Continue quand m√™me

    all_marches = []
    page_num = 1
    
    print(f"üöÄ D√©but de la r√©cup√©ration compl√®te")
    
    while True:
        print(f"üìÑ R√©cup√©ration page {page_num}...")
        
        # R√©cup√©rer les march√©s de la page actuelle
        page_marches = fetch_marches_from_current_page(driver)
        if not page_marches:
            print("‚ö†Ô∏è Aucun march√© r√©cup√©r√© sur cette page")
            if page_num == 1:
                # Si m√™me la premi√®re page ne donne rien, debug
                debug_page_elements(driver)
            break
            
        all_marches.extend(page_marches)
        print(f"‚úÖ Page {page_num}: {len(page_marches)} march√©s r√©cup√©r√©s (Total: {len(all_marches)})")
        
        # V√©rifier s'il y a une page suivante
        if not has_next_page(driver):
            print("‚úÖ Toutes les pages ont √©t√© r√©cup√©r√©es")
            break
            
        # Aller √† la page suivante
        if not go_to_next_page(driver):
            print("‚ö†Ô∏è Impossible d'aller √† la page suivante, arr√™t")
            break
            
        page_num += 1
        
        # S√©curit√©: √©viter une boucle infinie
        if page_num > 100:
            print("‚ö†Ô∏è Limite de pages atteinte (100 pages)")
            break
    
    print(f"üéâ R√©cup√©ration termin√©e: {len(all_marches)} march√©s au total")
    return all_marches


def fetch_marches_direct(driver, timeout=30):
    """Version originale pour compatibilit√© - r√©cup√®re seulement la premi√®re page"""
    if not wait_for_results_page(driver, timeout):
        return []
    
    return fetch_marches_from_current_page(driver)


def init_driver(headless=False):
    opts = Options()
    if headless:
        opts.add_argument("--headless=new")
    opts.add_argument("--disable-gpu")
    opts.add_argument("--no-sandbox")
    opts.add_argument("--disable-dev-shm-usage")
    opts.binary_location = "/usr/bin/chromium"

    service = Service("/usr/bin/chromedriver")
    return webdriver.Chrome(service=service, options=opts)